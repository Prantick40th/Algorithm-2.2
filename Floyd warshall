#include <bits/stdc++.h>
using namespace std;
#define vertices 4
#define INF 99999

int dist[vertices][vertices];

int graph[vertices][vertices] = {{0, 2, 1, 3},

    {-5, 0, 8, INF},

    {INF, INF, 0, 10},

    {INF, INF, INF, 0}
};

void printSolution()
{
    printf("Path : \n");

    cout<<endl;

    for (int i=0 ; i<vertices; i++)
    {
        for (int j=0; j<vertices ; j++)
        {
            if (dist[i][j] == INF)
                cout<<"\t"<<"INFINTY";
            else
                cout<<"\t"<<dist[i][j];
        }
        cout<<endl;
    }
}

void floydWarshall ()
{
    for (int i=0 ; i<vertices ; i++)
        for (int j=0 ; j<vertices; j++)

            dist[i][j] = graph[i][j];

    for (int k=0 ; k<vertices ; k++)
    {
        for (int i=0 ; i<vertices ; i++)
        {
            for (int j=0 ; j<vertices ; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution();
}

int main()
{
    floydWarshall();

    return 0;
}
