#include<bits/stdc++.h>
#include <iostream>
#include <vector>
#include <queue>
#define infinty 1000000007
using namespace std;

const int n = 7;

vector< vector<pair<int, int> > > FormAdjList()
{
    vector< vector<pair<int, int> > > adjList;


    for(int i = 0; i < n; i++)
    {
        vector<pair<int, int> > row;
        adjList.push_back(row);
    }

    adjList[0].push_back(make_pair(1, 2));
    adjList[0].push_back(make_pair(2, 3));

    adjList[1].push_back(make_pair(0, 2));
    adjList[1].push_back(make_pair(5, 1));

    adjList[2].push_back(make_pair(0, 3));
    adjList[2].push_back(make_pair(5, 2));

    adjList[3].push_back(make_pair(1, 4));
    adjList[3].push_back(make_pair(4, 1));
    adjList[3].push_back(make_pair(6, 2));

    adjList[4].push_back(make_pair(3, 1));
    adjList[4].push_back(make_pair(5, 2));
    adjList[4].push_back(make_pair(6, 1));

    adjList[5].push_back(make_pair(1, 1));
    adjList[5].push_back(make_pair(2, 2));
    adjList[5].push_back(make_pair(4, 2));
    adjList[5].push_back(make_pair(6, 2));

    adjList[6].push_back(make_pair(3, 2));
    adjList[6].push_back(make_pair(4, 1));
    adjList[6].push_back(make_pair(5, 2));


    return adjList;
}


vector<int> BellmanFord(vector< vector<pair<int, int> > > &adjList, int &start)
{
    vector<int> dist;

    int n = adjList.size();
    for(int i = 0; i < n; i++)
    {
        dist.push_back(infinty);
    }

    dist[start] = 0;

    for(int i = 0; i < n-1; i++)
    {
        for(int u = 0; u < n; u++)
        {
            for(int j = 0; j < adjList[u].size(); j++)
            {
                int v = adjList[u][j].first;
                int weight = adjList[u][j].second;

                if(dist[v] > dist[u] + weight)
                {
                    dist[v] = dist[u] + weight;
                }
            }
        }
    }
    return dist;
}

void PrintShortestPath(vector<int> &dist, int &start)
{

    cout << "\nStaring node " << start << ".\n";
    for(int i = 0; i < dist.size(); i++)
    {
        cout << "The distance from node " << start << " to node " << i << " is: " << dist[i] << endl;
    }
}

int main()
{
    vector< vector<pair<int, int> > > adjList = FormAdjList();

    int node = 0;
    vector<int> dist = BellmanFord(adjList, node);

    PrintShortestPath(dist, node);

    return 0;
}
