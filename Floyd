#include <bits/stdc++.h>
using namespace std;
#define V 4
#define INF 99999
void printSolution(int dist[][V]);
void floydWarshall (int graph[][V])
{
  int dist[V][V], i, j, k;
     for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)

            dist[i][j] = graph[i][j];

     for (k = 0; k < V; k++)

     {

         for (i = 0; i < V; i++)

        {
            for (j = 0; j < V; j++)

            {

             if (dist[i][k] + dist[k][j] < dist[i][j])

                    dist[i][j] = dist[i][k] + dist[k][j];

            }

        }

    }

    printSolution(dist);
}

void printSolution(int dist[][V])
{
int i,j,flag = 0;
    cout<<"The following matrix shows the shortest distances"

            " between every pair of vertices \n";

     cout<<endl;

    for (int i = 0; i < V; i++)

    {
      for (int j = 0; j < V; j++)
       {
        if (dist[i][j] == INF)
             cout<<"INF"<<"     ";
         else

                cout<<dist[i][j]<<"     ";

        }




		for(int j=0;j < V;j++){
            if( dist[i][j]<0)
            {
                flag=1;
            }

		}
		 cout<<endl;
    }
    cout<<endl;

    if(flag==1)
         cout<<"Negative weight cycle exists."<<"     ";

    else
         cout<<"All are positive."<<"     ";


        cout<<endl;

}







int main()
{

int graph[V][V] = { {0, 2, 1, 3},

                {-5, 0, 8, INF},

                {INF, INF, 0, 10},

               {INF, INF, INF, 0}

                };



    floydWarshall(graph);

    return 0;
}
