#include <bits/stdc++.h>
using namespace std;

#define N 5
int Set[N];

int findSet(int i)
{
    while (Set[i] != i)
        i = Set[i];
    return i;
}

void union1(int i, int j)
{
    int a = findSet(i);
    int b = findSet(j);
    Set[a] = b;
}

void kruskalMST(int cost[][N])
{
    int mincost = 0;

    for (int i=0 ; i<N ; i++)
        Set[i] = i;

    int edge_count = 0;

    while (edge_count < N-1)
    {
        int min = INT_MAX;
        int a = -1, b = -1;

        for (int i=0 ; i<N ; i++) {
            for (int j=0 ; j<N ; j++) {
                if (findSet(i) != findSet(j) && cost[i][j] < min) {
                    min = cost[i][j];
                    a = i;
                    b = j;
                }
            }
        }
        union1(a,b);

        printf("Edge %d -> (%d, %d) , cost:%d \n",edge_count++,a,b,min);
        mincost += min;
    }
    printf("\nMinimum cost= %d \n",mincost);
}

int main()
{
    int cost[][N] = {
        { INT_MAX, 2, INT_MAX, 6, INT_MAX },
        { 2, INT_MAX, 3, 8, 5 },
        { INT_MAX, 3, INT_MAX, INT_MAX, 7 },
        { 6, 8, INT_MAX, INT_MAX, 9 },
        { INT_MAX, 5, 7, 9, INT_MAX },
    };

    kruskalMST(cost);

    return 0;
}
