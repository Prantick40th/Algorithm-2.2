#include<bits/stdc++.h>
using namespace std;
#define LENGTH 30

int n, m;
int w[LENGTH], x[LENGTH];

void sumOfSubset(int sum, int k, int r)
{
    x[k] = 1;

    if(sum + w[k] == m)
    {
        for(int i=1 ; i <= n; i++)
        {
            if(i > k)
            {
                x[i] = 0;
            }
            printf("%d\t",x[i]);
        }
        printf("\n");

        return;
    }
    else if(sum + w[k] +  w[k + 1] <= m)
    {
        sumOfSubset(sum + w[k], k + 1, r- w[k]);
    }

    if((sum + r- w[k] >= m) && (sum + w[k+1] <= m))
    {
        x[k] = 0;

        sumOfSubset(sum, k + 1, r-w[k]);
    }
}

int main()
{


    printf("number of elements: ");
    scanf("%d",&n);

    printf ("\nset of elements: ");
    int r = 0;
    for(int i = 1; i <= n; i++)
    {
        scanf("%d",w[i]);
        r+= w[i];
    }

    printf("\nsum: ");
    cin >> m;

    printf( "\nAll Possible subsets:\n" );

    for(int i = 1; i <= n; i++)
    {
        printf ("%d\t",w[i]);
    }

    printf("\n");

    int sum = 0, k = 1;

    sumOfSubset(sum, k, r);

    return 0;
}

//////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
using namespace std;

void displaySubset(int subSet[], int size) {
   for(int i = 0; i < size; i++) {
      cout << subSet[i] << "  ";
   }
   cout << endl;
}

void subsetSum(int set[], int subSet[], int n, int subSize, int total, int nodeCount ,int sum) {
   if( total == sum) {
      displaySubset(subSet, subSize);     //print the subset
      subsetSum(set,subSet,n,subSize-1,total-set[nodeCount],nodeCount+1,sum);     //for other subsets
      return;
   }else {
      for( int i = nodeCount; i < n; i++ ) {     //find node along breadth
         subSet[subSize] = set[i];
         subsetSum(set,subSet,n,subSize+1,total+set[i],i+1,sum);     //do for next node in depth
      }
   }
}

void findSubset(int set[], int size, int sum) {
   int *subSet = new int[size];     //create subset array to pass parameter of subsetSum
   subsetSum(set, subSet, size, 0, 0, 0, sum);
   delete[] subSet;
}

int main() {
   int weights[] = {10, 7, 5, 18, 12, 20, 15};
   int size = 7;
   findSubset(weights, size, 35);
}
