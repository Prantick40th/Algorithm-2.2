#include<bits/stdc++.h>

#define NULL 0
#define QUEEN 1

int queen[100][100];
int n, total_solutions;

void initializeBoard(int n)
{
    memset(queen, NULL, sizeof(queen));
}

void printBoard()
{
    for(int i=1 ; i<=n ; i++)
    {
        for(int j=1 ; j<=n ; j++)
        {
            printf("%c ", queen[i][j] ? 'Q' : '_');
        }
        printf("\n");
    }
    printf("\n");
}

int haveConflict(int row, int col)
{
    int i,j;

    //check the column positions above this position
    for(i=1;i<row;i++)
    {
        if(queen[i][col] == QUEEN)
            return 1;
    }

    //check upper left diagonal
    for(i=row-1,j=col-1;i>0 && j>0;i--,j--)
    {
        if(queen[i][j] == QUEEN)
            return 1;
    }

    //check upper right diagonal
    for(i=row-1,j=col+1;i>0 && j<=n;i--,j++)
    {
        if(queen[i][j] == QUEEN)
            return 1;
    }

    return 0;
}



void backtrack(int queen_row)
{
    if(queen_row > n)
    {
        total_solutions++;
        printBoard();
        return;
    }

    for(int i=1 ; i<=n ; i++)
    {
        if(!haveConflict(queen_row, i))
        {
            queen[queen_row][i] = QUEEN;

            backtrack(queen_row + 1);

            queen[queen_row][i] = NULL;
        }
    }
}

int main()
{
    printf("Enter Board size: ");
    scanf("%d", &n);

    initializeBoard(n);

    backtrack(1);

    printf("Total Solutions: %d\n", total_solutions);

    return 0;
}
