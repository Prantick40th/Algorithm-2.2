#include <bits/stdc++.h>
using namespace std;
#define V 4
#define INF 99999

void printSolution(int dist[][V]);

void floydWarshall (int graph[][V])
{
    int dist[V][V];
    for (int i=0 ; i<V ; i++)
        for (int j=0 ; j<V; j++)

            dist[i][j] = graph[i][j];

    for (int k=0 ; k<V ; k++)
    {
        for (int i=0 ; i<V ; i++)
        {
            for (int j=0 ; j<V ; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }

    printSolution(dist);
}

void printSolution(int dist[][V])
{
    int flag = 0;
    printf("Path : \n");

    cout<<endl;

    for (int i=0 ; i<V; i++)

    {
        for (int j=0; j<V ; j++)
        {
            if (dist[i][j] == INF)
                cout<<"\t"<<"INF";
            else

                cout<<"\t"<<dist[i][j];

        }

        for(int j=0; j<V; j++)
        {
            if(dist[i][j]<0)
            {
                flag=1;
            }
        }
        cout<<endl;
    }
    cout<<endl;

    if(flag==1)
        cout<<"Negative weight cycle exists."<<"     ";

    else
        cout<<"All are positive."<<"     ";


    cout<<endl;

}

int main()
{

    int graph[V][V] = { {0, 2, 1, 3},

        {-5, 0, 8, INF},

        {INF, INF, 0, 10},

        {INF, INF, INF, 0}

    };



    floydWarshall(graph);

    return 0;
}
